#!/usr/bin/env bash
PROJECT=$2
ORG=$1
BUILDSH="/root/{{ organisation }}.{{ project }}.{{ scl_version }}.{{ scl_release }}.build.sh"
DEPENDECIES="/tmp/dependecies.lst"
echo > $DEPENDECIES
echo "#!/usr/bin/env bash"  > $BUILDSH
echo "" >> $BUILDSH
echo "yum-config-manager --add-repo http://repos.pip2scl.dk/RPMS/" >> $BUILDSH
echo 'grep -v "gpgcheck" /etc/yum.repos.d/repos.pip2scl.dk_RPMS_.repo >/dev/null 2>&1'  >> $BUILDSH
echo 'if [[ $? == 0 ]];' >> $BUILDSH
echo "then" >>  $BUILDSH
echo '  echo "gpgcheck = 0" >> /etc/yum.repos.d/repos.pip2scl.dk_RPMS_.repo ' >> $BUILDSH
echo 'fi' >> $BUILDSH
echo "yum clean all" >> $BUILDSH
echo "yum install  -y {{ organisation}}-{{ project }}-runtime.x86_64" >> $BUILDSH
echo "" >> $BUILDSH



echo "`date`: {{ organisation }} {{ project }} Creating software Collection for {{ organisation }} - project {{ project }}."

#PREPARE
echo "`date`: {{ organisation }} {{ project }} Prepare run."
mkdir ~/.ssh >/dev/null 2>&1
chmod 700 ~/.ssh
cp /home/vagrant/scldistro ~/.ssh/id_rsa
chmod 600 ~/.ssh/id_rsa
touch /root/rpmbuild/SOURCES/README
touch /root/rpmbuild/SOURCES/LICENSE

# Prep the reposerver
ssh repos.pip2scl.dk mkdir /usr/share/nginx/html/RPMS/x86_64 >/dev/null 2>&1


#META package
echo "`date`: {{ organisation }} {{ project }} Build the metapackage."

cd  >/dev/null 2>&1
if [[ -f /root/rpmbuild/RPMS/x86_64/{{ organisation }}-{{ project }}-runtime-{{ scl_version }}-{{ scl_release }}.el8.x86_64.rpm ]];
then
  echo "`date`: {{ organisation }} {{ project }} SCL metapackage already build "
else

  rpmbuild -ba {{ organisation }}.{{ project }}.meta.scl.spec >/dev/null 2>&1
  if [[ $? == 0 ]];
  then
    echo "`date`: {{ organisation }} {{ project }} SCL metapackage build ok"
  else
    echo "`date`: {{ organisation }} {{ project }} SCL metapackage build failed"
    exit 1
  fi
fi

echo "`date`: {{ organisation }} {{ project }} install the metapackage runtime."
cd 
rpm -qa |grep "{{ organisation }}-{{ project }}-runtime-{{ scl_version }}-{{ scl_release }}.el8.x86_64" >/dev/null 2>&1
if [[ $? == 0  ]];
then
  echo "`date`: {{ organisation }} {{ project }} metapackage runtime already installed."
else

  rpm -i  /root/rpmbuild/RPMS/x86_64/{{ organisation }}-{{ project }}-runtime-{{ scl_version }}-{{ scl_release }}.el8.x86_64.rpm
  if [[ $? == 0 ]];
  then
    echo "`date`: {{ organisation }} {{ project }} SCL metapackage installed ok"
    scp /root/rpmbuild/RPMS/x86_64/{{ organisation }}-{{ project }}-runtime-{{ scl_version }}-{{ scl_release }}.el8.x86_64.rpm repos.pip2scl.dk:/usr/share/nginx/RPMS/x86_64/
    ssh root@repos.pip2scl.dk sudo createrepo /usr/share/nginx/html/RPMS
  else
    echo "`date`: {{ organisation }} {{ project }} SCL metapackage install failed"
    exit 1
  fi
fi
exit

#The rest is obsolete

pip3 install --upgrade pip >/dev/null 2>&1
pip3 install spec2scl >/dev/null 2>&1
pip3 install ez_setup >/dev/null 2>&1
pip3 install setuptools >/dev/null 2>&1
pip3 install 2to3 >/dev/null 2>&1

echo > /tmp/excluded.lst
for DIR in `find /root/rpmbuild/SOURCES -maxdepth 2 -type d`
do
    PROJECTSH="/root/{{ organisation }}.{{ project }}.project.sh"
    rm $PROJECTSH >/dev/null 2>&1
    echo "#!/usr/bin/env bash" > $PROJECTSH
    echo "" >> $PROJECTSH

    cd $DIR >/dev/null 2>&1
    MYPKG=`echo $PWD|  rev|awk -F'/' '{ print $1 }'|rev`
    MYNAME=`echo $PWD|  rev|awk -F'/' '{ print $2 }'|rev`
    pip3 install --upgrade pip >/dev/null 2>&1

    #if we have a setup.py 

    if [[ -f setup.py ]];
    then
      echo "`date`: {{ organisation }} {{ project }} Building script for $MYPKG"
      #loop until build dependecies are cleare
      #Try with python 3
      COUNT="0"
      LOOP="YES"
      while [ $LOOP == "YES" ] && [ $COUNT -lt 5 ] ;
      do
        NEWCOUNT=`echo $COUNT |awk '{ print $1 + 1 }'`
        COUNT=`echo $NEWCOUNT`
        echo "`date`: {{ organisation }} {{ project }} looping to detect dependecies on $MYPKG "

        python3 setup.py bdist_rpm --spec-only >/tmp/std.log 2>&1
        if [[ $? == 0 ]];
        then
          LOOP="NO"
        else
          # Exception  #1 : Modules need to build
          for MODULE in `cat  /tmp/std.log |grep "No module named" |awk -F"'" '{ print $2 }'`
          do
            pip3 install $MODULE
          done

          # Exception  #1 : Package dir missing
          for PKGDIR in `cat  /tmp/std.log |grep "error: package directory" |awk -F"'" '{ print $2 }'`
          do
            mkdir $PKGDIR
            touch ${PKGDIR}/__init__.py
          done

        fi
      done

      echo "`date`: {{ organisation }} {{ project }} looping ended on $MYPKG ($COUNT/$LOOP)"
      if [[ $LOOP == NO ]];
      then
        echo "`date`: {{ organisation }} {{ project }} Creating SPEC files for $MYPKG"
        rm /root/{{ organisation }}.{{ project }}.project.spec.add >/dev/null 2>&1
        cat dist/*.spec > $DIR.spec
        spec2scl $DIR.spec > $DIR.scl.pre.spec
        awk '/record=INSTALLED_FILES/ { print; print "sed -i \"'s#^#/opt/{{ organisation }}/{{organisation}}-{{ project }}/root#'\" INSTALLED_FILES " ; next }1' $DIR.scl.pre.spec  > $DIR.scl.pre.spec.1
        cat $DIR.scl.pre.spec.1 | sed 's#root=$RPM_BUILD_ROOT#root=$RPM_BUILD_ROOT/opt/{{ organisation }}/{{ organisation }}-{{ project }}/root #' > $DIR.scl.pre.spec.2
        cat $DIR.scl.pre.spec.2 | sed "s#Source0:#Source0: http://repos.pip2scl.dk/SOURCES/${MYPKG}.tar.gz\nDELETELINE#"  |grep -v "^DELETELINE" > $DIR.scl.pre.spec.3
        MYVER=`echo $MYPKG | rev | awk -F"-" '{ print $1 }' |rev` 
        MYNAME=`echo $MYPKG | awk -F"-${MYVER}" '{ print $1 }'`
        echo "$MYNAME;$MYVER" >> $DEPENDECIES
        echo "`date`: {{ organisation }} {{ project }} Building script for $MYPKG Name: $MYNAME Version: $MYVER"
        cat $DIR.scl.pre.spec.3 | sed "s#setup -n #setup -n ${MYPKG}\nDELETELINE#" |grep -v "^DELETELINE" > /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.${MYPKG}.scl.spec
        scp /root/rpmbuild/SPECS/${ORG}.{{ project }}.${MYPKG}.scl.spec root@repos.pip2scl.dk:/usr/share/nginx/html/SPECS >/dev/null 2>&1
      
        cd .. >/dev/null 2>&1
        tar -czf /root/rpmbuild/SOURCES/$MYPKG.tar.gz $MYPKG
        scp  /root/rpmbuild/SOURCES/$MYPKG.tar.gz root@repos.pip2scl.dk:/usr/share/nginx/html/SOURCES >/dev/null 2>&1
        SCRIPT="build_{{ organisation }}_{{ project }}.$MYPKG.scl.sh"
        echo "#!/usr/bin/env bash" > $SCRIPT
        echo "" >> $SCRIPT
        echo "mkdir /root/rpmbuild/SPECS >/dev/null 2>&1" >> $SCRIPT
        echo "wget -O /root/rpmbuild/SPECS/{{ organisation}}.{{ project }}.${MYPKG}.scl.spec http://repos.pip2scl.dk/SPECS/{{ organisation }}.{{ project }}.${MYPKG}.scl.spec >/dev/null 2>&1" >> $SCRIPT
        echo "if [[ $? == 0 ]];" >> $SCRIPT
        echo "then" >> $SCRIPT
        echo "  echo \"\`date\`: Spec file copied\" " >> $SCRIPT
        echo "else" >> $SCRIPT
        echo "  echo \"\`date\`: Spec file copy failed\" "  >> $SCRIPT
        echo "  exit 1" >> $SCRIPT
        echo "fi" >> $SCRIPT
        echo "" >> $SCRIPT
        echo "wget -O /root/rpmbuild/SOURCES/${MYPKG}.tar.gz http://repos.pip2scl.dk/SOURCES/${MYPKG}.tar.gz >/dev/null 2>&1" >> $SCRIPT
        echo "if [[ $? == 0 ]];" >> $SCRIPT
        echo "then" >> $SCRIPT
        echo "  echo \"\`date\`: SOURCE file copied\"" >> $SCRIPT
        echo "else" >> $SCRIPT
        echo "  echo \"\`date\`: SOURCE file copy failed\"" >> $SCRIPT
        echo "  exit 1" >> $SCRIPT
        echo "fi" >> $SCRIPT
        echo "" >> $SCRIPT
        echo "rpmbuild -ba /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.${MYPKG}.scl.spec  --define \"scl {{ organisation }}-{{ project }}\" >/dev/null 2>&1" >> $SCRIPT
        echo "if [[ $? == 0 ]];" >> $SCRIPT
        echo "then" >> $SCRIPT
        echo "  echo \"\`date\`: met keystone package build with python3\"" >> $SCRIPT
        echo "else" >> $SCRIPT
        echo "  echo \"\`date\`: met keystone package build failled with python3\"" >> $SCRIPT
        echo "  exit 1" >> $SCRIPT
        echo "fi" >> $SCRIPT
        echo ""  >> $SCRIPT

        scp $SCRIPT  root@repos.pip2scl.dk:/usr/share/nginx/html/SCRIPTS/ >/dev/null 2>&1
        echo "curl http://repos.pip2scl.dk:/SCRIPTS/$SCRIPT | bash"  >> $BUILDSH
        if [[ $? == 0 ]];
        then
          echo "`date`: {{ organisation }} {{ project }} SCL build script for $MYPKG populated"
          echo "curl  http://repos.pip2scl.dk/SCRIPTS/${MYNAME}-${MYVER}.scl.sh  |bash " >> $PROJECTSH
          scp /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.${MYPKG}.scl.spec   root@repos.pip2scl.dk:/usr/share/nginx/html/SPECS >/dev/null 2>&1

          if [[ $? == 0 ]];
          then
            echo "`date`: {{ organisation }} {{ project }} SCL build SPEC file for $MYPKG populated"
          else  
            echo "`date`: {{ organisation }} {{ project }} SCL build SPEC file for $MYPKG failed"
          fi
        else
          echo "`date`: {{ organisation }} {{ project }} SCL build script for $MYPKG failed to be populated"
        fi 
      else
        echo "`date`: {{ organisation }} {{ project }} $MYPKG failed to be build and is excluded from the scl - "
        echo $MYPKG >> /tmp/excluded.lst
      fi
    fi
    cd - >/dev/null 2>&1 
done

scp $PROJECTSH      root@repos.pip2scl.dk:/usr/share/nginx/html/SCRIPTS
scp /root/{{ organisation }}.{{ project }}.project.spec      root@repos.pip2scl.dk:/usr/share/nginx/html/SPECS
scp $BUILDSH  root@repos.pip2scl.dk:/usr/share/nginx/html/SCRIPTS
scp  /tmp/excluded.lst root@repos.pip2scl.dk:/usr/share/nginx/html/PROJECTS/{{ organisation }}.{{ project }}.excluded.txt
cat  /tmp/excluded.lst

ssh root@repos.pip2scl.dk yum install -y createrepo
ssh root@repos.pip2scl.dk createrepo /usr/share/nginx/html/RPMS

cd /tmp/builder/checkout/{{ project }}/{{ version  }}
pip install wheel
python3 setup.py bdist_rpm --spec-only
spec2scl dist/{{ project }}.spec > dist/{{ project }}.scl.spec.pre

awk '/record=INSTALLED_FILES/ { print; print "sed -i \"'s#^#/opt/{{ organisation }}/{{organisation}}-{{ project }}/root#'\" INSTALLED_FILES " ; next }1' dist/{{ project }}.scl.spec.pre  > dist/{{ project }}.scl.spec.pre.1
cat dist/{{ project }}.scl.spec.pre.1 | sed 's#root=$RPM_BUILD_ROOT#root=$RPM_BUILD_ROOT/opt/{{ organisation }}/{{ organisation }}-{{ project }}/root #' > dist/{{ project }}.scl.spec.pre.2
cat dist/{{ project }}.scl.spec.pre.2 | sed "s#Source0:#Source0: http://repos.pip2scl.dk/SOURCES/{{ organisation }}.{{ project }}.{{ version }}.tar.gz\nDELETELINE#"  |grep -v "^DELETELINE" > dist/{{ project }}.scl.spec.pre.3
echo "`date`: {{ organisation }} {{ project }} Building script for {{ project }} - {{ version }}"
cat dist/{{ project }}.scl.spec.pre.3 | sed "s#setup -n #setup -n {{ version  }}\nDELETELINE#" |grep -v "^DELETELINE" > /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec.prereq

MYPWD=`pwd | rev | awk -F'/' '{ print $1 }'|rev `
cd ..
tar czvf /root/rpmbuild/SOURCES/{{ organisation }}.{{ project }}.{{ version }}.tar.gz $MYPWD/
scp /root/rpmbuild/SOURCES/{{ organisation }}.{{ project }}.{{ version }}.tar.gz root@repos.pip2scl.dk:/usr/share/nginx/html/SOURCES

for DEP in `cat $DEPENDECIES`
do
  MYNAME=`echo $DEP|awk -F';' '{ print $1 }'`
  MYVER=`echo $DEP|awk -F';' '{ print $2 }'`
  awk '/Group:/ { print; print "Requires: {{ organisation}}-{{ project}}-MYNAMEEQMYVER" ; next }1' /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec.prereq > /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec.prereq.new 
  sed -i "s/MYNAMEEQMYVER/${MYNAME} = ${MYVER}/" /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec.prereq.new 
  mv /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec.prereq.new /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec.prereq
done

mv /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec.prereq /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec
scp /root/rpmbuild/SPECS/{{ organisation }}.{{ project }}.{{ version }}.scl.spec root@repos.pip2scl.dk:/usr/share/nginx/html/SPECS >/dev/null 2>&1


echo "`date`: {{ organisation }} {{ project }} The end"